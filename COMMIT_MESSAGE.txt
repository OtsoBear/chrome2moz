refactor: simplify transformer to AST-only with executeScript parameter fix

BREAKING CHANGE: Removed complex executeScript-to-message-passing transformation

This major refactoring simplifies the codebase by removing ~2,600 lines of
complex transformation logic and focusing on reliable AST-based conversions.

## What Changed

### Removed Features (see REMOVED_FEATURES.md for details)
- executeScript-to-message-passing transformation (~1,700 lines)
- Long timer to alarms conversion (~200 lines)
- Content script listener auto-injection (~40 lines)
- AST_TRANSFORMER_PLAN.md documentation (892 lines)
- Test artifacts and submodule (output2-6, test-callback-conversion)

### Added Features
- Complete AST transformer implementation in src/transformer/ast/
  - parser.rs: JS/TS parsing with SWC
  - visitor.rs: AST visitor pattern for chrome→browser
  - codegen.rs: Code generation
  - scope.rs: Scope analysis for local vs global variables
  - callback.rs: Basic callback transformations
  - module_detector.rs: ES module/CommonJS/browser global detection
  - polyfill.rs: Smart polyfill injection (currently disabled)
  - execute_script.rs: Simple parameter fix (function→func)
- src/utils/url_replacer.rs: Regex-based chrome:// URL replacement
- Comprehensive test suite:
  - tests/ast_comprehensive.rs (469 lines)
  - tests/ast_transformer_phase1.rs
  - tests/ast_transformer_phase2.rs
  - tests/execute_script_fix.rs
  - tests/execute_script_messaging.rs

### Modified
- Cargo.toml: Updated to SWC 0.90 with focused feature set
- src/transformer/javascript.rs: Massive simplification (1,763→simple wrapper)
- src/transformer/mod.rs: Removed executeScript listener injection
- README.md: Updated to reflect current capabilities
- ARCHITECTURE.md: Updated with AST-based architecture details

## Why This Change

1. **Maintainability**: 2,600 fewer lines to maintain
2. **Reliability**: Simpler = fewer edge cases and bugs
3. **Performance**: Faster transformation without complex analysis
4. **Focus**: Core transformations that work reliably

## New Approach

Instead of complex executeScript transformation, we now:
1. Rename 'function' → 'func' parameter (Firefox compatibility)
2. Keep code injection simple and reliable

## Migration

Extensions using complex executeScript patterns may need manual updates.
See REMOVED_FEATURES.md for guidance.

## Benefits

- ✅ AST-based chrome→browser transformation instead of regex
- ✅ Full TypeScript support with type stripping
- ✅ Scope-aware transformations (local vs global)
- ✅ executeScript parameter compatibility fix
- ✅ Chrome URL replacement (chrome://→about:)
- ✅ Comprehensive test coverage

